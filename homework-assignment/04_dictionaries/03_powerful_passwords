import hashlib

def hash_password(password: str) -> str:
    """
    Hashes a given password using SHA-256.

    :param password: The password to be hashed.
    :return: The hashed password as a hexadecimal string.
    """
    return hashlib.sha256(password.encode()).hexdigest()

def login(email: str, stored_logins: dict, password_to_check: str) -> bool:
    """
    Checks if the provided password (after hashing) matches the stored hashed password for the given email.

    :param email: The email we are checking the password for.
    :param stored_logins: Dictionary containing stored hashed passwords mapped to emails.
    :param password_to_check: The password input to verify.
    :return: True if the password matches, False otherwise.
    """
    # Check if email exists in stored logins
    if email in stored_logins:
        return stored_logins[email] == hash_password(password_to_check)
    return False  # Email not found

def main():
    """
    Main function to test the login system with sample data.
    """
    # Sample database of emails and their corresponding hashed passwords
    stored_logins = {
        "example@gmail.com": hash_password("password"),
        "user123@domain.com": hash_password("securePass123"),
        "admin@website.com": hash_password("Admin@2024"),
    }

    # Test cases
    print(login("example@gmail.com", stored_logins, "password"))  # ✅ Expected: True
    print(login("example@gmail.com", stored_logins, "wrongpassword"))  # ❌ Expected: False
    print(login("user123@domain.com", stored_logins, "securePass123"))  # ✅ Expected: True
    print(login("admin@website.com", stored_logins, "Admin@2024"))  # ✅ Expected: True
    print(login("unknown@site.com", stored_logins, "doesntmatter"))  # ❌ Expected: False

if __name__ == '__main__':
    main()